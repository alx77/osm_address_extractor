#run with: ansible-playbook -i hosts -K postgres.yml
- hosts: storage.service
  vars:
    imposm_version: 0.11.1
    postgresql_version: 13
  tasks:
    - include: tasks/apt-upgrade.yml
    - include: tasks/common-tools.yml
    - include: tasks/monitor-tools.yml
    - include_vars:
        file: vars/passwords.yml
#    - name: Install tools packages
#      become: true
#      apt:
#        pkg:
#          - mc
#          - python3-pip
#          - python3-psycopg2
#          - osmium-tool
#          - aria2
#          - zip
#          - unzip
#          - gzip
#          - tar
#          - tmux
#        state: present
#    - name: Install monitor packages
#      become: true
#      apt:
#        pkg:
#          - iotop
#          - iperf
#          - smartmontools
#          - tcpdump
#          - iptraf
#          - htop
#          - netdiag
#          - iftop
#          - iptstate
#          - net-tools
#        state: present
    - name: Install postgresql
      become: true
      apt:
        pkg:
          - postgresql
          - postgis
        state: present
    - name: Download imposm3
      get_url:
        url: https://github.com/omniscale/imposm3/releases/download/v{{imposm_version}}/imposm-{{imposm_version}}-linux-x86-64.tar.gz
        dest: /home/storage/
    - name: Unpack imposm3
      unarchive:
        src: /home/storage/imposm-{{imposm_version}}-linux-x86-64.tar.gz
        dest: /home/storage/
        mode: '0755'
        copy: no
    - name: Make sure psycopg2 is installed
      pip:
        name: psycopg2
        state: present
    - name: Postgresql set root password
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_user:
        db: postgres
        name: postgres
        password: "{{pg_root_password}}"
    - name: Postgresql add `gis` DB
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_db:
        name: gis
        encoding: UTF-8
    - name: Postgresql add `gis` user
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_user:
        db: gis
        name: gis
        password: "{{pg_gis_password}}"
    - name: Postgresql grant all privileges to `gis` user
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_query:
        db: gis
        query: GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO gis;ALTER DATABASE gis OWNER TO gis; 
    - name: Postgresql add `postgis` and `hstore` extension
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_query:
        db: gis
        query: CREATE EXTENSION IF NOT EXISTS postgis;CREATE EXTENSION IF NOT EXISTS hstore;
    - name: Configure PostgreSQL. Setup shared_buffers.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "shared_buffers ="
        line: "shared_buffers = 4GB"
        state: present
    - name: Configure PostgreSQL. Set listen_addresses.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "listen_addresses ="
        line: "listen_addresses = '*'"
        state: present
      notify: restart postgresql
    - name: Configure PostgreSQL. Setup max_connections.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "max_connections ="
        line: "max_connections = 100"
        state: present
    - name: Configure PostgreSQL. Setup effective_cache_size.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "effective_cache_size ="
        line: "effective_cache_size = 10GB"
        state: present
    - name: Configure PostgreSQL. Setup maintenance_work_mem.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "maintenance_work_mem ="
        line: "maintenance_work_mem = 1GB"
        state: present
    - name: Configure PostgreSQL. Setup checkpoint_completion_target.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "checkpoint_completion_target ="
        line: "checkpoint_completion_target = 0.9"
        state: present
    - name: Configure PostgreSQL. Setup wal_buffers.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "wal_buffers ="
        line: "wal_buffers = 16MB"
        state: present
    - name: Configure PostgreSQL. Setup default_statistics_target.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "default_statistics_target ="
        line: "default_statistics_target = 100"
        state: present
    - name: Configure PostgreSQL. Setup random_page_cost.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "random_page_cost ="
        line: "random_page_cost = 4"
        state: present
    - name: Configure PostgreSQL. Setup min_wal_size.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "min_wal_size ="
        line: "min_wal_size = 1GB"
        state: present
    - name: Configure PostgreSQL. Setup max_wal_size.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "max_wal_size ="
        line: "max_wal_size = 4GB"
        state: present
    - name: Configure PostgreSQL. Setup effective_io_concurrency.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "effective_io_concurrency ="
        line: "effective_io_concurrency = 10"
        state: present
    - name: Configure PostgreSQL. Setup fsync.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "fsync ="
        line: "fsync = off"
        state: present
    - name: Configure PostgreSQL. Setup work_mem.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/postgresql.conf
        regexp: "work_mem ="
        line: "work_mem = 32MB"
        state: present
      notify: restart postgresql
    - name: Configure PostgreSQL. Enable access from subnet.
      become: true
      lineinfile:
        path: /etc/postgresql/{{postgresql_version}}/main/pg_hba.conf
        line: "host all all 10.0.0.1/8 trust\nlocal all all md5"
        state: present
      notify: restart postgresql
    - name: Download Germany map
      get_url:
        url: http://download.geofabrik.de/europe/germany-latest.osm.pbf
        dest: /home/storage/
        mode: '0755'
    - copy:
        src: files/mapping.yaml
        dest: /home/storage/
        mode: '0755'
    - name: Import data with `imposm3`
      command: /home/storage/imposm-{{imposm_version}}-linux-x86-64/imposm import -connection postgis://gis:{{pg_gis_password}}@localhost/gis -mapping mapping.yaml -read /home/storage/germany-latest.osm.pbf -write -overwritecache
  handlers:
    - name: restart postgresql
      become: true
      service:
        name: postgresql
        state: restarted
